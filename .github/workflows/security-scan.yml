name: Security Scan

on:
  # Run on pull requests
  pull_request:
    types: [opened, synchronize, reopened]
  
  # Run when triggered via API
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull request number'
        required: false
      sha:
        description: 'Commit SHA to analyze'
        required: false

permissions:
  contents: read
  pull-requests: write

jobs:
  security-scan:
    name: Run Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # If triggered by workflow_dispatch with a SHA, use that SHA
          ref: ${{ github.event.inputs.sha || github.sha }}

      # Check if it's a Go repository
      - name: Check for Go files
        id: check-go
        shell: bash
        run: |
          if [ -f "go.mod" ] || [ -f "go.sum" ] || [ -d "vendor" ] || find . -name "*.go" -type f | grep -q .; then
            echo "is_go_repo=true" >> $GITHUB_OUTPUT
          else
            echo "is_go_repo=false" >> $GITHUB_OUTPUT
          fi
  
      # Setup Go if it's a Go repository
      - name: Set up Go
        if: steps.check-go.outputs.is_go_repo == 'true'
        uses: actions/setup-go@v4
        with:
          go-version: '>=1.24'
  
      # Run govulncheck if it's a Go repository
      - name: Install and run govulncheck
        if: steps.check-go.outputs.is_go_repo == 'true'
        shell: bash
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck -format openvex ./... > govulncheck-results.json || true
          echo "Govulncheck scan completed"
  
      # Setup and run OpenGrep for code scanning
      - name: Install and run OpenGrep
        shell: bash
        run: |
          # Download opengrep binary
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/opengrep/opengrep/releases/latest | grep "tag_name" | cut -d '"' -f 4)
          echo "Downloading opengrep binary"
          curl -sSfL "https://github.com/opengrep/opengrep/releases/download/${LATEST_RELEASE}/opengrep_manylinux_x86" -o opengrep
    
          # Make the binary executable
          chmod +x opengrep
          
          # Run OpenGrep against PR files
          ./opengrep ci --config auto --metrics on --json-output=opengrep-results.json || true
          echo "OpenGrep scan completed"
  
      # Install and run TruffleHog for secret scanning
      - name: Install and run TruffleHog
        shell: bash
        run: |
          # Download TruffleHog binary (using v3.88.24)
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/trufflesecurity/trufflehog/releases/latest | grep "tag_name" | cut -d '"' -f 4)
          curl -sSfL "https://github.com/trufflesecurity/trufflehog/releases/download/v3.88.24/trufflehog_3.88.24_linux_amd64.tar.gz" | tar -xz
          chmod +x trufflehog
          
          # Run TruffleHog on the repository
          ./trufflehog git file://. --json --only-verified > trufflehog-results.json || true
          echo "TruffleHog scan completed"
  
      # Combine results into a single JSON file
      - name: Combine scan results
        shell: bash
        run: |
          OUTPUT_PATH="security-scan-results.json"
          cat > "$OUTPUT_PATH" << EOL
          {
            "metadata": {
              "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
              "repository": "${{ github.repository }}",
              "commit": "${{ github.sha }}",
              "ref": "${{ github.ref }}"
            },
            "govulncheck": $(if [ -f "govulncheck-results.json" ]; then cat govulncheck-results.json; else echo "null"; fi),
            "opengrep": $(if [ -f "opengrep-results.json" ]; then cat opengrep-results.json; else echo "null"; fi),
            "trufflehog": $(if [ -f "trufflehog-results.json" ]; then cat trufflehog-results.json; else echo "{}"; fi)
          }
          EOL
          echo "Combined scan results into $OUTPUT_PATH"

      # Upload the scan results as an artifact
      - name: Upload scan results as artifact
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: 'security-scan-results.json'
          retention-days: 3
